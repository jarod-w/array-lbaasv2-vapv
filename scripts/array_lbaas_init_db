#!/usr/bin/python
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#
#
#

import sys
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from array_neutron_lbaas.db import models

def help(msg=None):
    if msg:
        print "\nError: %s" % msg
    print """
Usage:

# array_lbaas_init_db <ACTION> [--db=<DB_PATH>] [OTHER_PARAMETERS]

ACTIONS:
    list        - lists all array amphora
    drop        - drop the array amphora table
    initialize  - creates the array amphora table in the neutron database

The db path must be in the following format:

<DB_TYPE>://<USERNAME>:<PASSWORD>@<DB_HOST>/<DB_NAME>

Eg.

mysql://root:P@ssword1@localhost/neutron

"""
    if msg:
        sys.exit(1)
    sys.exit(0)


def main(argv):
    try:
        # Check that a command has been passed
        try:
            command = argv[1]
        except IndexError:
            help("no command specified.")

        # Break passed parameters up into a dictionary
        try:
            args = {
                arg.split("=")[0][2:].replace("-", "_"):
                arg.split("=")[1].strip()
                for arg in argv[2:]
            }
        except IndexError:
            print ("\nPlease ensure you put '=' between parameter "
                   "names and values.\n")
            sys.exit(1)

        db_path = args['db']
        # Execute requested operation...
        if command == "list":
            engine = create_engine(db_path, pool_recycle=300)
            session_maker = sessionmaker(bind=engine)
            db = session_maker()
            db.query(models.ArrayAmphora).all()
        elif command == "drop":
            print "\nDone!\n"
        elif command == "initialize":
            # Create the database table to hold vapv instance
            engine = create_engine(db_path, pool_recycle=300)
            models.BaseTable.metadata.create_all(engine)
            print "\nDone!\n"
        else:
            help()
    except KeyError as e:
        help("missing parameter '--%s'" % (
            str(e).replace("_", "-").replace("'", "")
        ))
    except Exception as e:
        print "\nError: %s\n" % e
        raise
        sys.exit(1)


if __name__ == "__main__":
    main(sys.argv)
